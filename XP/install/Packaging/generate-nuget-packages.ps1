param(
  [string] $Major = "9",
  [string] $Minor = "0",
  [string] $Update = "1",
  [string] $Date = "171219",
  [string] $nugetPath = ".\tools\nuget.exe",
  [string] $downloadsPath = "C:\\inetpub\\wwwroot\\habitat.dev.local",
  [string] $outputPath = "C:\\LocalNuGet\\Generated",
  [string] $nuspecTemplate = ".\tools\package.nuspec.xml"
)
function Publish-NugetPackageFromWebsiteBin(
  [string] $major,
  [string] $minor,
  [string] $update,
  [string] $date,
  [string] $nugetPath,
  [string] $downloadsPath,
  [string] $outputPath,
  [string] $nuspecTemplate)
{
  $bin = Resolve-Path ("$downloadsPath\bin")
  $nugetPath = Resolve-Path $nugetPath
  $nuspecTemplate = Resolve-Path $nuspecTemplate
  $updateText = "Initial Release"
  if($update -gt 0)
  {
    $updateText = "$major.$minor Update-$update"
  }
  $description = "Sitecore Experience Platform $major.$minor rev. $date ($updateText) Preview Release"
  $version = "$major.$minor.$update.$date"
  # clean-up
  $output = New-Item -ItemType Directory -Path ($outputPath + "\" + [System.Guid]::NewGuid())
  echo 'Output is ' + $outputPath

  Get-ChildItem $bin |
    Where-Object {$_.Name -match "^Sitecore.*\.dll$"} |
    Foreach { Publish-NugetPackageFromDLL $bin $_.Name $output.FullName $description $version $nugetPath $nuspecTemplate }
}

function Publish-NugetPackageFromDLL(
  $binPath, $assemblyName, $output, $description, $productVersion, $nugetPath, $nuspecTemplate)
{
    $tempPath = $output + "\tmp"
    # dlls
    $file = Get-Item "$binPath\$assemblyName"
    $id = [System.IO.Path]::GetFileNameWithoutExtension($file) + ".NoReferences"
    $version = $productVersion
    $framework = Get-FrameworkVersion($file)
    # create package directory
    $tmpFolder =New-Item $tempPath -type directory -Force
    $packageFolder = New-Item "$tmpFolder\$id" -type directory -Force
    $libsFolder = New-Item "$packageFolder\lib" -type directory -Force
    $frameworkFolder = New-Item "$libsFolder\$framework" -type directory -Force
    # packages
    $nuspeck = New-Nuspec $file $binPath $nuspecTemplate $id $productVersion $description $framework $packageFolder
    # write files
    Copy-Item $file $frameworkFolder -Force
    $assemblyXml = "$binPath\$id.xml"
    if(Test-Path $assemblyXml)
    {
        Copy-Item $assemblyXml $frameworkFolder -Force
    }
    $assemblyPub = "$binPath\$id.pub"
    if(Test-Path $assemblyPub)
    {
        Copy-Item $assemblyPub $frameworkFolder -Force
    }

    $output = New-Item "$output\packages" -type directory -Force
    & $nugetPath pack $tempPath\$Id\$Id.nuspec -OutputDirectory $output
}

function New-Nuspec(
  $assemblyFile,
  [string] $binPath,
  [string] $nuspecTemplate,
  [string] $packageId,
  [string] $packageVerison,
  [string] $packageDescription,
  [string] $packageFramework,
  [string] $output
)
{
  $xml = [xml](Get-Content $nuspecTemplate)
  # Set ID
  $node = $xml.package.metadata
  $node.ID = $packageId
  $node.title = $packageId
  $node.version = $packageVerison
  $node.description = "Autogenerated NuGet package from $packageDescription"
  $node.summary = "Summary : " + $packageId + "."
  $files = $xml.CreateElement('files');
  $file = $xml.CreateElement('file');
  
  echo "Bin Path " $binPath
  echo "AssemblyPath " $assemblyFile
  $assemblyPath = "lib\NET462\" + $assemblyFile.Name;
  $file.SetAttribute('src', $assemblyPath ); 
  $file.SetAttribute('target', $assemblyPath );
  $files.AppendChild($file);
  $xml.package.AppendChild($files);
  $xml.Save("$output\$packageId.nuspec")
  return Get-Item "$output\$packageId.nuspec"
}

function Get-FrameworkVersion([string] $path)
{
    $imageRuntimeVersion = [System.Reflection.Assembly]::LoadFrom($path).ImageRuntimeVersion.ToString()
    if($imageRuntimeVersion.Contains("v4.5"))
    {
        return "net45"
    }
    return "NET462"
}

Publish-NugetPackageFromWebsiteBin $Major $Minor $Update $Date $nugetPath $downloadsPath $outputPath $nuspecTemplate