{
    "Parameters": {
        "CertificateName": {
            "Type": "string",
            "Description": "The name of the certificate to be created."
        },
        "CertPath": {
            "Type": "string",
            "Description": "The physical path on disk where certificates will be stored.",
            "DefaultValue": "C:\\certificates"
        },
        "RootCertFileName": {
            "Type": "string",
            "Description": "The file name of the root certificate to be created.",
            "DefaultValue": "SitecoreRootCert"
        },
        // A password may be passed on the command line to export the certificates. If this isn't
        // supplied then one will be generated on your behalf. Check the logs for the password.
        "ExportPassword" : {
            "Type" :"String",
            "Description" :"Password to export certificates with.",
            "DefaultValue" : "SIF-Default"
        }
    },
    "Variables": {
        // The DNS name of the root certificate.
        "Root.Cert.DnsName": "[concat('DO_NOT_TRUST_', parameter('RootCertFileName'))]",
        // The certificate store for the root certificate.
        "Root.Cert.Store": "Cert:\\LocalMachine\\Root",
        // The certificate store for the client certificate.
        "Client.Cert.Store": "Cert:\\LocalMachine\\My",
        // Variable to detect user supplied string and generate a secure password as required.
        "Export.Password" : "[if(variable('User.Supplied.Password'),variable('Secure.Password'),variable('Convert.User.Password'))]",
        // Check for user supplied password.
        "User.Supplied.Password" : "[equal(parameter('ExportPassword'),'SIF-Default')]",
        // Conversion of password to a secure string.
        "Secure.Password" : "[ConvertToSecureString(String:variable('Password.String'),AsPlainText:true,Force:true)]",
        // Password generated from the internal config function.
        "Password.String" : "[RandomString(Length:20,EnforceComplexity:True)]",
        // Convert User password to Secure String
        "Convert.User.Password" : "[ConvertToSecureString(String:parameter('ExportPassword'),AsPlainText:true,Force:true)]"
    },
    // Extra registrations.
    "Register":{
        "Tasks" :{
            "WriteOutput" : "Write-Output"
        },
        "ConfigFunction": {
            "ConvertToSecureString" :"ConvertTo-SecureString"
        }
    },
    "Tasks": {
        "CreatePaths": {
            // Create the physical disk path.
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[parameter('CertPath')]"
                ]
            }
        },
        "DisplayPassword" :{
            // Print password if the user hasn't supplied their own.
            "Type" : "WriteOutput",
            "Params" : {
                "InputObject" :"[concat('Certificate Password: ',variable('Password.String'))]"
            },
            "Skip" : "[not(variable('User.Supplied.Password'))]"
        },
        "CreateRootCert": {
            // Create the root certificate.
            "Type": "NewRootCertificate",
            "Params": {
                "Path": "[parameter('CertPath')]",
                "Name": "[parameter('RootCertFileName')]",
                "DnsName": [
                    "[variable('Root.Cert.DnsName')]",
                    "127.0.0.1"
                ],
                "IncludePrivateKey" : true,
                "Password" : "[variable('Export.Password')]"
            }
        },
        "CreateSignedCert": {
            // Create a certificate signed by the root authority.
            "Type": "NewSignedCertificate",
            "Params": {
                "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]",
                "Path": "[parameter('CertPath')]",
                "CertStoreLocation": "[variable('Client.Cert.Store')]",
                "Name": "[parameter('CertificateName')]",
                "DnsName": [
                    "[parameter('CertificateName')]",
                    "127.0.0.1"
                ],
                "IncludePrivateKey": true,
                "Password" : "[variable('Export.Password')]"
            }
        }
    }
}